'use strict';

// web-components-loader Copyright Â© 2016 Ray Nicholus
var DOMParser = require('xmldom').DOMParser;
var fs = require('fs');
var loaderUtils = require('loader-utils');
var minifyHtml = require('html-minifier').minify;
var mkdirp = require('mkdirp');
var path = require('path');
var remotePathPattern = new RegExp('^(?:[a-z]+:)?//', 'i');
var uglifyCss = require('uglifycss');
var uglifyJs = require('uglify-js');

module.exports = function (htmlFileContent) {
    var _this = this;

    var filesToEmit = [this.resourcePath].concat(getLocalDependencies(htmlFileContent, this.context));

    var emittedOutputPaths = [];

    var resourceDirName = this.context.split('/').pop();

    var htmlFileNameSansExt = this.resourcePath.split('/').pop().slice(0, -5);

    var parsedQuery = loaderUtils.parseQuery(this.query);

    var outputPath = parsedQuery.outputPath == null ? this.options.output.path : parsedQuery.outputPath;

    var outputPublicPath = parsedQuery.outputPublicPath == null ? this.options.output.publicPath : parsedQuery.outputPublicPath;

    var localOutputDir = outputPath + '/web-components';

    var minify = parsedQuery.minify;

    var outputDir = localOutputDir + '/' + resourceDirName;

    this.cacheable();

    filesToEmit.forEach(function (filePath) {
        'use strict';

        var relativePath = path.relative(_this.context, filePath);
        var fileOutputPath = outputDir + '/' + relativePath;
        var fileOutputDir = path.dirname(fileOutputPath);
        var rawContent = fs.readFileSync(filePath).toString();
        var transformJs = _this.options.webComponentsLoader && _this.options.webComponentsLoader.transformJs;

        if (!fs.existsSync(fileOutputDir)) {
            mkdirp.sync(fileOutputDir);
        }

        var contentToOutput = rawContent;

        if (transformJs && filePath.endsWith('.js')) {
            contentToOutput = transformJs(contentToOutput);
        }

        if (minify) {
            contentToOutput = getMinifiedOutput(filePath, contentToOutput);
        }

        fs.writeFileSync(fileOutputPath, contentToOutput);
        _this.addDependency(filePath);
        emittedOutputPaths.push(fileOutputPath);
    });

    var htmlImportPath = outputPublicPath + 'web-components/' + resourceDirName + '/' + htmlFileNameSansExt + '.html';
    return 'module.exports = \'' + htmlImportPath + '\'';
};

var getLocalDependencies = function getLocalDependencies(htmlFileContent, htmlFilePath) {
    var htmlFileDoc = new DOMParser().parseFromString(htmlFileContent, 'text/html');
    var localDependencies = [];

    Array.from(htmlFileDoc.getElementsByTagName('link')).forEach(function (linkEl) {
        var href = linkEl.getAttribute('href');

        // iff this is a local path
        if (href.trim() && !remotePathPattern.test(href)) {
            var relativePath = path.join(htmlFilePath, href);

            localDependencies.push(relativePath);

            // getLocalDependencies of this imported HTML file too
            if (linkEl.getAttribute('rel') === 'import') {
                var childHtmlFileContent = fs.readFileSync(relativePath).toString();
                var childHtmlFileDependencies = getLocalDependencies(childHtmlFileContent, path.dirname(relativePath));

                localDependencies.push.apply(localDependencies, childHtmlFileDependencies);
            }
        }
    });

    Array.from(htmlFileDoc.getElementsByTagName('script')).forEach(function (scriptEl) {
        var src = scriptEl.getAttribute('src');

        // iff this is a local path
        if (src.trim() && !remotePathPattern.test(src)) {
            localDependencies.push(path.join(htmlFilePath, src));
        }
    });

    return localDependencies;
};

var getMinifiedHtml = function getMinifiedHtml(unminifiedHtml) {
    return minifyHtml(unminifiedHtml, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        minifyCSS: true,
        minifyJS: true,
        processConditionalComments: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeOptionalTags: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        trimCustomFragments: true
    });
};

var getMinifiedOutput = function getMinifiedOutput(filePath, code) {
    if (filePath.endsWith('.html')) {
        return getMinifiedHtml(code);
    } else if (filePath.endsWith('.css')) {
        return uglifyCss.processString(code);
    } else if (filePath.endsWith('.js')) {
        return uglifyJs.minify(code, { fromString: true }).code;
    }
};
